name: template-build-test

on:
  workflow_call:
    inputs:
      dotnet-version:
        description: 'dotnet version to install'
        required: false
        type: string
        default: |
          8.0.x
      dotnet-quality:
        description: 'dotnet quality train'
        required: false
        type: string
        default: 'ga'
      check-eslint:
        description: 'path to script folder you want to check for ES6 compliance'
        required: false
        type: string
      working-directory:
        description: 'the root of the build'
        required: false
        type: string
        default: './src'

jobs:
  code-quality-check:
    name: Check code quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup dotnet version
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: ${{ inputs.dotnet-version }}
          dotnet-quality: ${{ inputs.dotnet-quality }}
  
      - name: Restore dependencies
        run: dotnet restore

      - uses: xt0rted/dotnet-format-problem-matcher@v1
      - name: dotnet format
        run: dotnet format --verify-no-changes

  build-test:
    name: Build and test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install eslint
        if: ${{ inputs.check-eslint != null }}
        run: npm i -g eslint@8.57.0

      - name: Check JS is ES6 compliant
        if: ${{ inputs.check-eslint != null }}
        run: eslint --env 'es6' ${{ inputs.check-eslint }}

      - name: Setup dotnet version
        uses: actions/setup-dotnet@v4
        with: 
          dotnet-version: ${{ inputs.dotnet-version }}
          dotnet-quality: ${{ inputs.dotnet-quality }}

      - name: Restore
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test -c Release --no-build --no-restore --blame-hang --blame-hang-timeout 60s /property:GenerateFullPaths=true /consoleloggerparameters:NoSummary /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:ExcludeByAttribute='ExcludeFromCodeCoverageAttribute' /p:ExcludeByAttribute='CompilerGeneratedAttribute' /p:ExcludeByFile='**/*.g.cs' /p:SkipAutoProps=true /p:CoverletOutput='./TestResults/'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: TestResults

